
ARG CUDA_VER=11.1
ARG PYTORCH_VERSION=1.7.1
ARG TORCHVISION_VERSION=0.8.2
ARG UBUNTU_VERSION=18.04
ARG INSTALL_PREFIX=/usr/local
ARG NUM_THREADS=16
ARG PYTORCH_IMAGE=nvcr.io/nvidia/pytorch:20.10-py3
ARG BASE_IMAGE=nvidia/cuda:${CUDA_VER}-cudnn8-devel-ubuntu${UBUNTU_VERSION}


FROM ${PYTORCH_IMAGE} AS pytorch_image

# Must rebuild in the pytorch container to disable some features that
# are not relevant for inferencing and so that OpenCV libraries are
# not included in the server (which will likely conflict with custom
# backends using opencv). The uninstalls seem excessive but is the
# recommendation from pytorch CONTRIBUTING.md.
WORKDIR /opt/pytorch
RUN (conda uninstall -y pytorch || true) && \
    (conda uninstall -y ninja || true) && \
    pip uninstall -y torch && \
    pip uninstall -y torch
RUN cd pytorch && \
    python setup.py clean && \
    TORCH_CUDA_ARCH_LIST="5.2 6.0 6.1 7.0 7.5 8.0+PTX" \
    CUDA_HOME="/usr/local/cuda" \
    CMAKE_PREFIX_PATH="$(dirname $(which conda))/../" \
    USE_DISTRIBUTED=OFF USE_OPENMP=OFF USE_NCCL=OFF USE_SYSTEM_NCCL=OFF \
    USE_OPENCV=OFF USE_LEVELDB=OFF USE_LMDB=OFF USE_REDIS=OFF \
    BUILD_TEST=OFF \
    pip install --no-cache-dir -v .

FROM ${BASE_IMAGE} as dep-base
ENV DEBIAN_FRONTEND noninteractive

# install dependencies via apt
ENV DEBCONF_NOWARNINGS yes
RUN set -x && \
  apt-get update -y -qq && \
  apt-get upgrade -y -qq --no-install-recommends && \
  : "basic dependencies" && \
  apt-get install -y -qq \
    build-essential \
    pkg-config \
    git \
    wget \
    curl \
    tar \
    make \
    python3 \
    python3-dev \
    python3-pip \
    unzip && \
  : "g2o dependencies" && \
  apt-get install -y -qq \
    libgoogle-glog-dev \
    libatlas-base-dev \
    libsuitesparse-dev \
    libglew-dev && \
  : "OpenCV dependencies" && \
  apt-get install -y -qq \
    libgtk-3-dev \
    libjpeg-dev \
    libpng++-dev \
    libtiff-dev \
    libopenexr-dev \
    libwebp-dev \
    ffmpeg \
    libavcodec-dev \
    libavformat-dev \
    libavutil-dev \
    libswscale-dev \
    libavresample-dev && \
  : "other dependencies" && \
  apt-get install -y -qq \
    libyaml-cpp-dev  \
    libssl-dev && \
  : "remove cache" && \
  pip3 install cmake

# FROM conda-installs AS libtorch-install
FROM dep-base AS libtorch-install



COPY --from=pytorch_image \
     /opt/conda/lib/python3.6/site-packages/torch/lib/libcaffe2_detectron_ops_gpu.so \
     /usr/local/lib/pytorch/
COPY --from=pytorch_image \
     /opt/conda/lib/python3.6/site-packages/torch/lib/libc10.so \
     /usr/local/lib/pytorch/
COPY --from=pytorch_image \
     /opt/conda/lib/python3.6/site-packages/torch/lib/libc10_cuda.so \
     /usr/local/lib/pytorch/
COPY --from=pytorch_image /opt/conda/lib/libmkl_avx2.so /usr/local/lib/pytorch/
COPY --from=pytorch_image /opt/conda/lib/libmkl_core.so /usr/local/lib/pytorch/
COPY --from=pytorch_image /opt/conda/lib/libmkl_def.so /usr/local/lib/pytorch/
COPY --from=pytorch_image /opt/conda/lib/libmkl_gnu_thread.so /usr/local/lib/pytorch/
COPY --from=pytorch_image /opt/conda/lib/libmkl_intel_lp64.so /usr/local/lib/pytorch/
COPY --from=pytorch_image /opt/conda/lib/libmkl_rt.so /usr/local/lib/pytorch/
COPY --from=pytorch_image /opt/conda/lib/libmkl_vml_def.so /usr/local/lib/pytorch/
COPY --from=pytorch_image /opt/conda/lib/libmkl_intel_thread.so /usr/local/lib/pytorch/

# LibTorch and Torchvision headers and libraries
COPY --from=pytorch_image /opt/conda/lib/python3.6/site-packages/torch/include \
     /usr/local/include/torch
COPY --from=pytorch_image /opt/conda/lib/python3.6/site-packages/torch/lib/libtorch.so \
      /usr/local/lib/pytorch/
COPY --from=pytorch_image /opt/conda/lib/python3.6/site-packages/torch/lib/libtorch_cpu.so \
      /usr/local/lib/pytorch/
COPY --from=pytorch_image /opt/conda/lib/python3.6/site-packages/torch/lib/libtorch_cuda.so \
      /usr/local/lib/pytorch/
COPY --from=pytorch_image /opt/conda/lib/python3.6/site-packages/torch/lib/libcaffe2_nvrtc.so \
     /usr/local/lib/pytorch/
COPY --from=pytorch_image /opt/pytorch/vision/torchvision/csrc \
    /usr/local/include/torchvision/
COPY --from=pytorch_image /opt/pytorch/vision/build/libtorchvision.so \
    /usr/local/lib/pytorch/libtorchvision.so

FROM libtorch-install AS build-third-party
ARG INSTALL_PREFIX
ARG CMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}
ARG NUM_THREADS
# ENV Torch_DIR=${INSTALL_PREFIX}/libtorch
ENV CPATH=${CMAKE_INSTALL_PREFIX}/include:${CPATH}
ENV C_INCLUDE_PATH=${CMAKE_INSTALL_PREFIX}/include:${C_INCLUDE_PATH}
ENV CPLUS_INCLUDE_PATH=${CMAKE_INSTALL_PREFIX}/include:${CPLUS_INCLUDE_PATH}
ENV LIBRARY_PATH=${CMAKE_INSTALL_PREFIX}/lib:${LIBRARY_PATH}
ENV LD_LIBRARY_PATH=/usr/local/lib/pytorch/:${CMAKE_INSTALL_PREFIX}/lib:${LD_LIBRARY_PATH}
ENV NVIDIA_VISIBLE_DEVICES ${NVIDIA_VISIBLE_DEVICES:-all}
ENV NVIDIA_DRIVER_CAPABILITIES ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}graphics


# ARG TORCHVISION_COMMIT=2f40a483d73018ae6e1488a484c5927f2b309969
WORKDIR /tmp
RUN set -x && \
  git clone https://github.com/pytorch/vision.git


# Eigen
ARG EIGEN3_VERSION=3.3.7
WORKDIR /tmp
RUN set -x && \
  wget -q https://gitlab.com/libeigen/eigen/-/archive/${EIGEN3_VERSION}/eigen-${EIGEN3_VERSION}.tar.bz2 && \
  tar xf eigen-${EIGEN3_VERSION}.tar.bz2 && \
  rm -rf eigen-${EIGEN3_VERSION}.tar.bz2 && \
  cd eigen-${EIGEN3_VERSION} && \
  mkdir -p build && \
  cd build && \
  cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
    .. && \
  make -j${NUM_THREADS} && \
  make install 
ENV Eigen3_DIR=${CMAKE_INSTALL_PREFIX}/share/eigen3/cmake

# g2o
ARG G2O_COMMIT=9b41a4ea5ade8e1250b9c1b279f3a9c098811b5a
WORKDIR /tmp
RUN set -x && \
  git clone https://github.com/RainerKuemmerle/g2o.git && \
  cd g2o && \
  git checkout ${G2O_COMMIT} && \
  mkdir -p build && \
  cd build && \
  cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
    -DBUILD_SHARED_LIBS=ON \
    -DBUILD_UNITTESTS=OFF \
    -DBUILD_WITH_MARCH_NATIVE=OFF \
    -DG2O_USE_CHOLMOD=OFF \
    -DG2O_USE_CSPARSE=ON \
    -DG2O_USE_OPENGL=OFF \
    -DG2O_USE_OPENMP=ON \
    -DG2O_BUILD_APPS=OFF \
    -DG2O_BUILD_EXAMPLES=OFF \
    -DG2O_BUILD_LINKED_APPS=OFF \
    .. && \
  make -j${NUM_THREADS} && \
  make install
ENV g2o_DIR=${CMAKE_INSTALL_PREFIX}/lib/cmake/g2o

# OpenCV
ARG OPENCV_VERSION=4.1.0
WORKDIR /tmp
RUN set -x && \
  wget -q https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip && \
  unzip -q ${OPENCV_VERSION}.zip && \
  rm -rf ${OPENCV_VERSION}.zip && \
  cd opencv-${OPENCV_VERSION} && \
  mkdir -p build && \
  cd build && \
  cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
    -DBUILD_DOCS=OFF \
    -DBUILD_EXAMPLES=OFF \
    -DBUILD_JASPER=OFF \
    -DBUILD_OPENEXR=OFF \
    -DBUILD_PERF_TESTS=OFF \
    -DBUILD_TESTS=OFF \
    -DBUILD_opencv_apps=OFF \
    -DBUILD_opencv_dnn=OFF \
    -DBUILD_opencv_ml=OFF \
    -DBUILD_opencv_python_bindings_generator=OFF \
    -DENABLE_CXX11=ON \
    -DENABLE_FAST_MATH=ON \
    -DWITH_EIGEN=ON \
    -DWITH_FFMPEG=ON \
    -DWITH_OPENMP=ON \
    .. && \
  make -j${NUM_THREADS} && \
  make install
ENV OpenCV_DIR=${CMAKE_INSTALL_PREFIX}/lib/cmake/opencv4

# DBoW2
ARG DBOW2_COMMIT=687fcb74dd13717c46add667e3fbfa9828a7019f
WORKDIR /tmp
RUN set -x && \
  git clone https://github.com/shinsumicco/DBoW2.git && \
  cd DBoW2 && \
  git checkout ${DBOW2_COMMIT} && \
  mkdir -p build && \
  cd build && \
  cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
    .. && \
  make -j${NUM_THREADS} && \
  make install
ENV DBoW2_DIR=${CMAKE_INSTALL_PREFIX}/lib/cmake/DBoW2

# Pangolin
ARG PANGOLIN_COMMIT=ad8b5f83222291c51b4800d5a5873b0e90a0cf81
WORKDIR /tmp
RUN set -x && \
  git clone https://github.com/stevenlovegrove/Pangolin.git && \
  cd Pangolin && \
  git checkout ${PANGOLIN_COMMIT} && \
  sed -i -e "193,198d" ./src/utils/file_utils.cpp && \
  mkdir -p build && \
  cd build && \
  cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
    -DBUILD_EXAMPLES=OFF \
    -DBUILD_PANGOLIN_DEPTHSENSE=OFF \
    -DBUILD_PANGOLIN_FFMPEG=OFF \
    -DBUILD_PANGOLIN_LIBDC1394=OFF \
    -DBUILD_PANGOLIN_LIBJPEG=OFF \
    -DBUILD_PANGOLIN_LIBOPENEXR=OFF \
    -DBUILD_PANGOLIN_LIBPNG=OFF \
    -DBUILD_PANGOLIN_LIBREALSENSE=OFF \
    -DBUILD_PANGOLIN_LIBREALSENSE2=OFF \
    -DBUILD_PANGOLIN_LIBTIFF=OFF \
    -DBUILD_PANGOLIN_LIBUVC=OFF \
    -DBUILD_PANGOLIN_LZ4=OFF \
    -DBUILD_PANGOLIN_OPENNI=OFF \
    -DBUILD_PANGOLIN_OPENNI2=OFF \
    -DBUILD_PANGOLIN_PLEORA=OFF \
    -DBUILD_PANGOLIN_PYTHON=OFF \
    -DBUILD_PANGOLIN_TELICAM=OFF \
    -DBUILD_PANGOLIN_TOON=OFF \
    -DBUILD_PANGOLIN_UVC_MEDIAFOUNDATION=OFF \
    -DBUILD_PANGOLIN_V4L=OFF \
    -DBUILD_PANGOLIN_VIDEO=OFF \
    -DBUILD_PANGOLIN_ZSTD=OFF \
    -DBUILD_PYPANGOLIN_MODULE=OFF \
    .. && \
  make -j${NUM_THREADS} && \
  make install
ENV Pangolin_DIR=${CMAKE_INSTALL_PREFIX}/lib/cmake/Pangolin

# socket.io-client-cpp
ARG SIOCLIENT_COMMIT=ff6ef08e45c594e33aa6bc19ebdd07954914efe0
WORKDIR /tmp
RUN set -x && \
  git clone https://github.com/shinsumicco/socket.io-client-cpp.git && \
  cd socket.io-client-cpp && \
  git checkout ${SIOCLIENT_COMMIT} && \
  git submodule init && \
  git submodule update && \
  mkdir -p build && \
  cd build && \
  cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
    -DBUILD_UNIT_TESTS=OFF \
    .. && \
  make -j${NUM_THREADS} && \
  make install && \
  cd /tmp && \
  rm -rf *
ENV sioclient_DIR=${CMAKE_INSTALL_PREFIX}/lib/cmake/sioclient


# protobuf
WORKDIR /tmp
RUN set -x && \
  apt-get update -y -qq && \
  apt-get upgrade -y -qq --no-install-recommends && \
  apt-get install -y -qq autogen autoconf libtool && \
  wget -q https://github.com/google/protobuf/archive/v3.6.1.tar.gz && \
  tar xf v3.6.1.tar.gz && \
  cd protobuf-3.6.1 && \
  ./autogen.sh && \
  ./configure --prefix=${CMAKE_INSTALL_PREFIX} --enable-static=no && \
  make -j${NUM_THREADS} && \
  make install && \
  cd /tmp && \
  rm -rf * && \
  apt-get purge -y -qq autogen autoconf libtool && \
  apt-get autoremove -y -qq && \
  rm -rf /var/lib/apt/lists/*

FROM build-third-party AS build
ARG INSTALL_PREFIX
ARG CMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}
ARG NUM_THREADS=16

# OpenVSLAM
# COPY . /openvslam/
WORKDIR /openvslam/
# RUN set -x && \
#   mkdir -p build && \
#   cd build && \
#   cmake \
#     -DBUILD_WITH_MARCH_NATIVE=OFF \
#     -DUSE_PANGOLIN_VIEWER=ON \
#     -DUSE_SOCKET_PUBLISHER=OFF \
#     -DUSE_STACK_TRACE_LOGGER=ON \
#     -DBOW_FRAMEWORK=DBoW2 \
#     -DBUILD_TESTS=OFF \
#     .. && \
#   make -j${NUM_THREADS} && \
#   rm -rf CMakeCache.txt CMakeFiles Makefile cmake_install.cmake example src && \
#   chmod -R 777 ./* && \
#   cd /tmp && \
#   rm -rf *
ENTRYPOINT ["/bin/bash"]



